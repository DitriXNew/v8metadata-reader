#Использовать logos
#Использовать "../internal"

#Область ОписаниеПеременных

Перем _лог;

Перем _ИнформацияОПоддержке;
Перем _УровниФайлов;

Перем _классы;

Перем _КаталогИсходников;
Перем _ЭтоВыгрузкаКонфигуратора;
Перем _ЭтоВыгрузкаЕДТ;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта( Знач пКаталогИсходников )

	_лог = Логирование.ПолучитьЛог(ИмяЛога());
	_КаталогИсходников = пКаталогИсходников;

	ОпределитьТипВыгрузки();

	_ИнформацияОПоддержке = ПрочитатьИнформациюОПоддержке();

	ЗаполнитьУровниФайлов();

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает уровень поддержки
// Возвращаемое значение:
//  Число - 0 - на замке
//          1 - на поддержке
//          2 - снято с поддержки
//          3 - нет поддержки
//          4 - не удалось определить уровень поддержки
Функция Уровень( Знач пИмяФайла ) Экспорт

	текУровень = _УровниФайлов[пИмяФайла];

	Если Не текУровень = Неопределено Тогда

		Возврат текУровень;

	КонецЕсли;

	файл = ВыгрузкаКонфигурации.АбсолютныйПуть( пИмяФайла );
	текУровень = _УровниФайлов[файл];

	Если текУровень = Неопределено Тогда

		текУровень = 4;
		_лог.Предупреждение( "Не удалось определить уровень поддержки для %1", пИмяФайла );

	КонецЕсли;

	_УровниФайлов.Вставить( файл, текУровень );

	Возврат текУровень;

КонецФункции

// Все файлы с заданным уровнем поддержки
//
// Параметры:
//  пУровень - Число - уровень поддержки
//  пМодификатор - Строка - "+", "-", "=". 2- - вернет все файлы с уровнями 0, 1 и 2, 3= - все файлы с уровнем 3.
//
// Возвращаемое значение:
//  Массив - массив с путями к файлам
Функция ВсеФайлы( Знач пУровень, Знач пМодификатор = "=" ) Экспорт

	массивФайлов = Новый Массив;

	Для каждого цЭлемент Из _ИнформацияОПоддержке Цикл

		текУровень = цЭлемент.Support;
		соответствуетУсловию = Ложь;

		Если (пМодификатор = "="
			И текУровень = пУровень)
			ИЛИ (пМодификатор = "+"
			И текУровень >= пУровень)
			ИЛИ (пМодификатор = "-"
			И текУровень <= пУровень) Тогда

			соответствуетУсловию = Истина;

		Иначе

			соответствуетУсловию = Ложь;

		КонецЕсли;

		Если соответствуетУсловию Тогда

			массивФайлов.Добавить( цЭлемент.file );

		КонецЕсли;

	КонецЦикла;

	Возврат массивФайлов;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ИмяЛога() Экспорт
	Возврат "oscript.app.parseSupport";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьТипВыгрузки()

	_ЭтоВыгрузкаКонфигуратора = ВыгрузкаКонфигурации.ЭтоВыгрузкаКонфигурации( _КаталогИсходников );
	_ЭтоВыгрузкаЕДТ = ВыгрузкаКонфигурации.ЭтоВыгрузкаЕДТ( _КаталогИсходников );

	_лог.Отладка("Это выгрузка конфигурации: " + _ЭтоВыгрузкаКонфигуратора );
	_лог.Отладка("Это выгрузка EDT: " + _ЭтоВыгрузкаЕДТ );

	Если ( Не _ЭтоВыгрузкаЕДТ И Не _ЭтоВыгрузкаКонфигуратора)
		ИЛИ (_ЭтоВыгрузкаЕДТ И _ЭтоВыгрузкаКонфигуратора) Тогда

		ВызватьИсключение "Не удалось определить тип выгрузки";

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУровниФайлов()

	_УровниФайлов = Новый Соответствие;

	Для каждого цЭлемент Из _ИнформацияОПоддержке Цикл

		текУровень = цЭлемент.Support;

		_УровниФайлов.Вставить( цЭлемент.file, текУровень);

	КонецЦикла;

КонецПроцедуры

#Область ЧтениеИнформацииОПоддержке

Функция ПрочитатьИнформациюОПоддержке()

	Если _ЭтоВыгрузкаКонфигуратора Тогда

		путьКФайлуПоддержки = ОбъединитьПути( _КаталогИсходников, "Ext", "ParentConfigurations.bin" );

	ИначеЕсли _ЭтоВыгрузкаЕДТ Тогда

		путьКФайлуПоддержки = ОбъединитьПути( _КаталогИсходников, "Configuration", "ParentConfigurations.bin" );

	Иначе

		ВызватьИсключение "Не удалось определить тип выгрузки";

	КонецЕсли;

	Если ВыгрузкаКонфигурации.ФайлСуществует( путьКФайлуПоддержки ) Тогда

		_лог.Отладка( СтрШаблон( "Файл поддержки <%1> найден", путьКФайлуПоддержки ) );

	Иначе

		_лог.Ошибка( СтрШаблон( "Файл поддержки <%1> НЕ найден", путьКФайлуПоддержки ) );
		Возврат Новый Массив;

	КонецЕсли;

	данныеПоддержки = ПолучитьДанныеПоддержки( путьКФайлуПоддержки );

	описанияПоддержки = данныеПоддержки["ОписанияОбъектов"];
	описанияФайлов = Новый Массив;

	_классы = Классы();

	Для каждого цФайлМодуля Из НайтиФайлы( _КаталогИсходников, "*.bsl", Истина ) Цикл

		структФайла = Новый Структура;
		структФайла.Вставить( "file", цФайлМодуля.ПолноеИмя );
		структФайла.Вставить( "uuid", ПолучитьУУИДПоФайлу( цФайлМодуля.ПолноеИмя ) );

		уровеньПоддержки = 4;

		Для каждого цЭлементПоддержки Из ОбеспечитьЭлемент( описанияПоддержки, структФайла.uuid, Новый Массив ) Цикл

			уровеньПоддержки = Мин( уровеньПоддержки, Число(цЭлементПоддержки) );

		КонецЦикла;

		структФайла.Вставить( "Support", уровеньПоддержки );

		описанияФайлов.Добавить( структФайла );

	КонецЦикла;

	Возврат описанияФайлов;

КонецФункции

Функция ПолучитьДанныеПоддержки( Знач пПутьКФайлуПоддержки )

	чтениеТекста = Новый ЧтениеТекста( пПутьКФайлуПоддержки, "UTF-8" );
	текстПоддержки = чтениеТекста.Прочитать();
	чтениеТекста.Закрыть();

	данные = СтрРазделить( текстПоддержки, ",", Истина );

	всегоКонфигураций = Число( данные[Индекс_КоличествоКонфигурацийПоддержки()] );

	_лог.Отладка( "Количество конфигураций поставщика: " + всегоКонфигураций );

	сдвиг = 3;

	данныеПоддержки = Новый Соответствие;

	соотОбъекты = Новый Соответствие;

	Для цНомерКонфигурации = 1 По всегоКонфигураций Цикл

		поставка = Новый Структура;

		поставка.Вставить("УУИД", данные[сдвиг+2]); // гуид конфигурации ?
		поставка.Вставить("Версия"      , данные[сдвиг+3]);
		поставка.Вставить("Поставщик"   , данные[сдвиг+4]);
		поставка.Вставить("Конфигурация", данные[сдвиг+5]);

		ЗапрещеныИзменения = данные[сдвиг + 1];
		Если ЗапрещеныИзменения = "0" Тогда
			РазрешеныИзменения = Истина;
		ИначеЕсли ЗапрещеныИзменения = "1" Тогда
			РазрешеныИзменения = Ложь;
		Иначе
			ВызватьИсключение "Неизвестный вариант настройки изменений конфигурации, ожидалось 0 или 1, а получили " + ЗапрещеныИзменения;
		КонецЕсли;

		поставка.Вставить("РазрешеныИзменения", РазрешеныИзменения);

		_лог.Отладка( "Чтение конфигурации: " + поставка.Конфигурация + ", версии: " + поставка.Версия +", разрешены изменения " + РазрешеныИзменения);

		всегоОбъектов = Число(данные[сдвиг+6]);

		_лог.Отладка( "Объектов: " + всегоОбъектов );

		массивОбъектов = Новый Массив;

		Для цНомерОбъекта = 0 По всегоОбъектов - 1 Цикл

			сдвигОбъекта = сдвиг + 7 + цНомерОбъекта*4;

			описаниеОбъекта = Новый Структура;

			описаниеОбъекта.Вставить( "Поддержка", данные[сдвигОбъекта] ); // 0 - не редактируется, 1 - с сохранением поддержки, 2 - снято
			описаниеОбъекта.Вставить( "Поставка", данные[сдвигОбъекта + 1]); // 0 - изменения разрешены, 1 - изменения не рекомендуются, 2 - изменения запрещены, -1 - включение в конфигурацию не рекомендуется
			описаниеОбъекта.Вставить( "УУИД", данные[сдвигОбъекта + 2]);
			описаниеОбъекта.Вставить( "УУИДПоставщика", данные[сдвигОбъекта + 3]);

			массивОбъектов.Добавить( описаниеОбъекта );

			ОбеспечитьЭлемент( соотОбъекты, описаниеОбъекта.УУИД, Новый Массив ).Добавить(описаниеОбъекта.Поддержка);

		КонецЦикла;

		поставка.Вставить( "Объекты", массивОбъектов );

		данныеПоддержки.Вставить( поставка.Конфигурация, поставка );

		сдвиг = сдвиг + 9 + всегоОбъектов*4;

	КонецЦикла;

	данныеПоддержки.Вставить( "ОписанияОбъектов", соотОбъекты );

	Возврат данныеПоддержки;

КонецФункции

Функция Индекс_КоличествоКонфигурацийПоддержки()

	Возврат 2;

КонецФункции

Функция ОбеспечитьЭлемент( пСоответствие, пКлюч, пЗначениеПоУмолчанию )

	значение = пСоответствие[пКлюч];

	Если Не значение = Неопределено Тогда

		Возврат значение;

	Иначе

		пСоответствие.Вставить( пКлюч, пЗначениеПоУмолчанию );

		Возврат пЗначениеПоУмолчанию;

	КонецЕсли;

КонецФункции

Функция ПолучитьУУИДПоФайлу( Знач пПутьКФайлу )

	файлМодуля = Новый Файл( пПутьКФайлу );
	путь = СтрЗаменить( файлМодуля.ПолноеИмя, "/", "\" );
	компонентыПути = СтрРазделить( путь, "\" );

	ууид = Неопределено;

	Если ЭтоКорень(компонентыПути) Тогда

		Если _ЭтоВыгрузкаКонфигуратора Тогда

			путьКОписанию = ПутьКФайлуОписания( компонентыПути, 2, ПолучитьРазделительПути() + "Configuration.xml" );

		Иначе

			путьКОписанию = ПутьКФайлуОписания( компонентыПути, 2, ПолучитьРазделительПути() + ОбъединитьПути("Configuration", "Configuration.mdo") );

		КонецЕсли;

		ууид = УУИДИзФайлаОписания(пПутьКФайлу, путьКОписанию);

	ИначеЕсли ЭтоФорма(компонентыПути) Тогда

		имяФормы = "";
		типЭлемента = "";

		Если _ЭтоВыгрузкаКонфигуратора Тогда

			путьКОписанию = ПутьКФайлуОписания( компонентыПути, 3 );

		Иначе

			Если ВРег(КомпонентСКонца( компонентыПути, 3 )) = "COMMONFORMS" Тогда

				имяОбъекта = КомпонентСКонца( компонентыПути, 2 );
				путьКОписанию = ПутьКФайлуОписания( компонентыПути, 1, ПолучитьРазделительПути() + имяОбъекта + ".mdo" );

			Иначе

				имяОбъекта = КомпонентСКонца( компонентыПути, 4 );
				путьКОписанию = ПутьКФайлуОписания( компонентыПути, 3, ПолучитьРазделительПути() + имяОбъекта + ".mdo" );
				имяФормы = КомпонентСКонца( компонентыПути, 2 );
				типЭлемента = ВРег("Forms");

			КонецЕсли;

		КонецЕсли;

		ууид = УУИДИзФайлаОписания(пПутьКФайлу, путьКОписанию, имяФормы, типЭлемента);

	ИначеЕсли ЭтоКоманда(компонентыПути) Тогда

		Если _ЭтоВыгрузкаКонфигуратора Тогда

			путьКОписанию = ПутьКФайлуОписания( компонентыПути, 4 );
			имяКоманды = КомпонентСКонца( компонентыПути, 3 );
			типЭлемента = ВРег("Command");

		Иначе

			имяОбъекта = КомпонентСКонца( компонентыПути, 4 );
			путьКОписанию = ПутьКФайлуОписания( компонентыПути, 3, ПолучитьРазделительПути() + имяОбъекта + ".mdo" );
			имяКоманды = КомпонентСКонца( компонентыПути, 2 );
			типЭлемента = ВРег("Commands");

		КонецЕсли;

		ууид = УУИДИзФайлаОписания(пПутьКФайлу, путьКОписанию, имяКоманды, типЭлемента);

	ИначеЕсли ЭтоОбъект(компонентыПути) Тогда

		Если _ЭтоВыгрузкаКонфигуратора Тогда

			путьКОписанию = ПутьКФайлуОписания( компонентыПути, 2 );

		Иначе

			имяОбъекта = КомпонентСКонца( компонентыПути, 2 );
			путьКОписанию = ПутьКФайлуОписания( компонентыПути, 1, ПолучитьРазделительПути() + имяОбъекта + ".mdo" );

		КонецЕсли;

		ууид = УУИДИзФайлаОписания(пПутьКФайлу, путьКОписанию);

	Иначе

		_лог.Предупреждение( СтрШаблон( "Не удалось получить xml файл для <%1>.", пПутьКФайлу ));

	КонецЕсли;

	Если ууид = Неопределено Тогда

		_лог.Предупреждение( "Не удалось получить uuid из " + путьКОписанию );

	КонецЕсли;

	Возврат ууид;

КонецФункции

Функция ЭтоОбъект(Знач пКомпоненты)

	Если _ЭтоВыгрузкаКонфигуратора Тогда

		// \Ext\

		Возврат ВРег(КомпонентСКонца( пКомпоненты, 2 )) = ВРег( "Ext" );

	Иначе

		// Считаем все объекты модулями, если они не были перехвачены раньше. Другой способ пока не придуман.
		Возврат Истина;

	КонецЕсли;

КонецФункции

Функция ЭтоФорма(Знач пКомпоненты)

	Если _ЭтоВыгрузкаКонфигуратора Тогда

		// \Ext\Form\

		Возврат ВРег(КомпонентСКонца( пКомпоненты, 2 )) = ВРег( "Form" )
		И ВРег(КомпонентСКонца( пКомпоненты, 3 )) = ВРег( "Ext" );

	Иначе

		// Проверяем, что рядом лежит файл формы

		путьКФорме = ПутьКФайлуОписания(пКомпоненты, 1, "/Form.form");

		Возврат ВыгрузкаКонфигурации.ФайлСуществует(путьКФорме);

	КонецЕсли;

КонецФункции

Функция ЭтоКоманда(Знач пКомпоненты)

	Если _ЭтоВыгрузкаКонфигуратора Тогда

		// имяОбъекта\Commands\имяКоманды\Ext\CommandModule.bsl

		имяФайла = КомпонентСКонца( пКомпоненты, 1 );

		Возврат ВРег(имяФайла) = Врег( "CommandModule.bsl" )
		И ВРег(КомпонентСКонца(пКомпоненты, 2)) = ВРег( "Ext" )
		И ВРег(КомпонентСКонца(пКомпоненты, 4)) = ВРег( "Commands" );

	Иначе

		// имяОбъекта\Commands\имяКоманды\CommandModule.bsl

		имяФайла = КомпонентСКонца( пКомпоненты, 1 );

		Возврат ВРег(имяФайла) = Врег( "CommandModule.bsl" )
		И ВРег(КомпонентСКонца(пКомпоненты, 3)) = ВРег( "Commands" );

	КонецЕсли;

КонецФункции

Функция ЭтоКорень(Знач пКомпоненты)

	имяФайла = ВРег(КомпонентСКонца( пКомпоненты, 1 ));

	Возврат имяФайла = Врег( "ExternalConnectionModule.bsl" )
	ИЛИ имяФайла = Врег( "ManagedApplicationModule.bsl" )
	ИЛИ имяФайла = Врег( "OrdinaryApplicationModule.bsl" )
	ИЛИ имяФайла = Врег( "SessionModule.bsl" );

КонецФункции

Функция КомпонентСКонца( Знач пКомпоненты, Знач пНомерСКонца, Знач пЗначениеПоУмолчанию = "")

	элементов = пКомпоненты.Количество();

	Если пНомерСКонца > элементов Тогда
		Возврат пЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат пКомпоненты[элементов - пНомерСКонца];

КонецФункции

Функция ПутьКФайлуОписания( Знач пКомпоненты, Знач пУдалитьУровней, Знач пИмяФайла = ".xml" )

	компонентыПути = Новый Массив;

	Для ц = 0 По пКомпоненты.ВГраница() - пУдалитьУровней Цикл

		компонентыПути.Добавить( пКомпоненты[ц] );

	КонецЦикла;

	Возврат СтрСоединить( компонентыПути, ПолучитьРазделительПути() ) + пИмяФайла;

КонецФункции

Функция УУИДИзФайлаОписания(Знач пПутьКФайлу, Знач путьКОписанию, Знач пИмяЭлемента = "", Знач пТипЭлемента = "")

	файлОписания = Новый Файл( путьКОписанию );

	Если Не файлОписания.Существует()
		ИЛИ Не файлОписания.ЭтоФайл() Тогда

		_лог.Предупреждение( СтрШаблон( "Не удалось найти xml файл для <%1>. Искали в <%2>", пПутьКФайлу, путьКОписанию ));

		Возврат Неопределено;

	КонецЕсли;

	чтениеXML = Новый ЧтениеXML;

	чтениеXML.ОткрытьФайл( путьКОписанию );

	ууид = Неопределено;

	Если Не ЗначениеЗаполнено( пИмяЭлемента ) Тогда

		Пока ЧтениеXML.Прочитать() Цикл

			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И Не _классы.Найти( ВРег( ЧтениеXML.Имя ) ) = Неопределено Тогда

				ууид = ЧтениеXML.ПолучитьАтрибут("uuid");
				Прервать;

			КонецЕсли;

		КонецЦикла;

	Иначе

		Пока ЧтениеXML.Прочитать() Цикл

			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И ВРег( ЧтениеXML.Имя ) = пТипЭлемента Тогда

				ууид = ЧтениеXML.ПолучитьАтрибут("uuid");
				//Прервать;

			КонецЕсли;

			Если Не ууид = Неопределено
				И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
				И ВРег( ЧтениеXML.Имя ) = ВРег("Name") Тогда

				ЧтениеXML.Прочитать();

				Если ВРег( ЧтениеXML.Значение ) = ВРег( пИмяЭлемента ) Тогда
					// Нашли описание нужной команды
					Прервать;
				Иначе
					ууид = Неопределено;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ЧтениеXML.Закрыть();

	Возврат ууид;

КонецФункции

Функция Классы()

	классы = Новый Массив;

	классы.Добавить( "AccountingRegister" );
	классы.Добавить( "AccumulationRegister" );
	классы.Добавить( "BusinessProcess" );
	классы.Добавить( "CalculationRegister" );
	классы.Добавить( "Catalog" );
	классы.Добавить( "ChartOfAccounts" );
	классы.Добавить( "ChartOfCalculationTypes" );
	классы.Добавить( "ChartOfCharacteristicTypes" );
	классы.Добавить( "CommandGroup" );
	классы.Добавить( "CommonAttribute" );
	классы.Добавить( "CommonCommand" );
	классы.Добавить( "CommonForm" );
	классы.Добавить( "CommonModule" );
	классы.Добавить( "CommonPicture" );
	классы.Добавить( "CommonTemplate" );
	классы.Добавить( "Configuration" );
	классы.Добавить( "Constant" );
	классы.Добавить( "DataProcessor" );
	классы.Добавить( "DefinedType" );
	классы.Добавить( "Document" );
	классы.Добавить( "DocumentJournal" );
	классы.Добавить( "DocumentNumerator" );
	классы.Добавить( "Enum" );
	классы.Добавить( "EventSubscription" );
	классы.Добавить( "ExchangePlan" );
	классы.Добавить( "ExternalDataSource" );
	классы.Добавить( "FilterCriterion" );
	классы.Добавить( "Form" );
	классы.Добавить( "FunctionalOption" );
	классы.Добавить( "FunctionalOptionsParameter" );
	классы.Добавить( "HTTPService" );
	классы.Добавить( "InformationRegister" );
	классы.Добавить( "Language" );
	классы.Добавить( "Report" );
	классы.Добавить( "Role" );
	классы.Добавить( "ScheduledJob" );
	классы.Добавить( "Sequence" );
	классы.Добавить( "SessionParameter" );
	классы.Добавить( "SettingsStorage" );
	классы.Добавить( "Style" );
	классы.Добавить( "StyleItem" );
	классы.Добавить( "Task" );
	классы.Добавить( "WebService" );
	классы.Добавить( "WSReference" );
	классы.Добавить( "XDTOPackage" );

	классыВРег = Новый Массив;

	Если _ЭтоВыгрузкаКонфигуратора Тогда

		префикс = "";

	Иначе

		префикс = "mdclass:";

	КонецЕсли;

	Для каждого цЭлемент Из классы Цикл

		классыВРег.Добавить( ВРег( префикс + цЭлемент ) );

	КонецЦикла;

	Возврат классыВРег;

КонецФункции

#КонецОбласти

#КонецОбласти
